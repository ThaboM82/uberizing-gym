{"ast":null,"code":"import axios from 'axios';\nexport let JobsActionTypes;\n\n(function (JobsActionTypes) {\n  JobsActionTypes[\"FETCH_JOBS_PENDING\"] = \"FETCH_JOBS_PENDING\";\n  JobsActionTypes[\"FETCH_JOBS_SUCCESS\"] = \"FETCH_JOBS_SUCCESS\";\n  JobsActionTypes[\"FETCH_JOBS_ERROR\"] = \"FETCH_JOBS_ERROR\";\n})(JobsActionTypes || (JobsActionTypes = {}));\n\nconst fetchJobsPending = () => {\n  return {\n    type: JobsActionTypes.FETCH_JOBS_PENDING\n  };\n};\n\nconst fetchJobsSuccess = jobs => {\n  return {\n    type: JobsActionTypes.FETCH_JOBS_SUCCESS,\n    payload: jobs\n  };\n};\n\nconst fetchJobsError = error => {\n  return {\n    type: JobsActionTypes.FETCH_JOBS_ERROR,\n    error\n  };\n};\n\nexport const fetchJobs = () => async dispatch => {\n  dispatch(fetchJobsPending());\n\n  try {\n    const jobs = await axios.get('http://localhost:3030/jobs');\n    setTimeout(() => {\n      dispatch(fetchJobsSuccess(jobs.data));\n    }, 1000);\n  } catch (error) {\n    dispatch(fetchJobsError(error));\n  }\n};","map":{"version":3,"sources":["/app/src/actions/jobs/index.tsx"],"names":["axios","JobsActionTypes","fetchJobsPending","type","FETCH_JOBS_PENDING","fetchJobsSuccess","jobs","FETCH_JOBS_SUCCESS","payload","fetchJobsError","error","FETCH_JOBS_ERROR","fetchJobs","dispatch","get","setTimeout","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAoBZ,MAAMC,gBAAgB,GAAG,MAAmB;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAEF,eAAe,CAACG;AADnB,GAAP;AAGH,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,IAAD,IAA8B;AACnD,SAAO;AACHH,IAAAA,IAAI,EAAEF,eAAe,CAACM,kBADnB;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,cAAc,GAAIC,KAAD,IAA8B;AACjD,SAAO;AACHP,IAAAA,IAAI,EAAEF,eAAe,CAACU,gBADnB;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM,MAAOC,QAAP,IAA8B;AACzDA,EAAAA,QAAQ,CAACX,gBAAgB,EAAjB,CAAR;;AACA,MAAI;AACA,UAAMI,IAAI,GAAG,MAAMN,KAAK,CAACc,GAAN,CAAU,4BAAV,CAAnB;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbF,MAAAA,QAAQ,CAACR,gBAAgB,CAACC,IAAI,CAACU,IAAN,CAAjB,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GALD,CAKE,OAAMN,KAAN,EAAa;AACXG,IAAAA,QAAQ,CAACJ,cAAc,CAACC,KAAD,CAAf,CAAR;AACH;AACJ,CAVM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport Job from '../../models/Job';\n\nexport enum JobsActionTypes {\n    FETCH_JOBS_PENDING = 'FETCH_JOBS_PENDING',\n    FETCH_JOBS_SUCCESS = 'FETCH_JOBS_SUCCESS',\n    FETCH_JOBS_ERROR = 'FETCH_JOBS_ERROR'\n}\n\ninterface JobsPending {\n    type: typeof JobsActionTypes.FETCH_JOBS_PENDING;\n}\n\ninterface JobsSuccess {\n    type: typeof JobsActionTypes.FETCH_JOBS_SUCCESS;\n    payload: Job[]\n}\n\ninterface JobsError {\n    type: typeof JobsActionTypes.FETCH_JOBS_ERROR;\n    error: string;\n}\n\nconst fetchJobsPending = (): JobsPending => {\n    return {\n        type: JobsActionTypes.FETCH_JOBS_PENDING\n    }\n}\n\nconst fetchJobsSuccess = (jobs: Job[]): JobsSuccess => {\n    return {\n        type: JobsActionTypes.FETCH_JOBS_SUCCESS,\n        payload: jobs\n    }\n}\n\nconst fetchJobsError = (error: string): JobsError => {\n    return {\n        type: JobsActionTypes.FETCH_JOBS_ERROR,\n        error\n    }\n}\n\nexport const fetchJobs = () => async (dispatch: Dispatch) => {\n    dispatch(fetchJobsPending());\n    try {\n        const jobs = await axios.get('http://localhost:3030/jobs');\n        setTimeout(() => {\n            dispatch(fetchJobsSuccess(jobs.data));\n        }, 1000);\n    } catch(error) {\n        dispatch(fetchJobsError(error));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}