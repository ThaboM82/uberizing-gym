{"ast":null,"code":"var _jsxFileName = \"/jobs-portal/src/containers/JobDetails/index.tsx\";\nimport React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { connect } from 'react-redux';\nimport { fetchJob } from '../../actions';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Loading from '../../components/Loading';\nimport JobMeta from '../../components/JobMeta';\n\nclass JobDetails extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderJobMetadata = meta => {\n      return React.createElement(JobMeta, Object.assign({}, meta, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchJob(this.props.match.params.id);\n  }\n\n  render() {\n    const job = this.props.job.job;\n    const isLoading = this.props.job.pending;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      className: isLoading ? 'text-center' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"job-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"job-details__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, job.title)), React.createElement(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, job.company.name, \", \", job.company.city))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 9,\n      className: \"job-details__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, ReactHtmlParser(eval('`' + job.description + '`')))), React.createElement(Col, {\n      lg: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.renderJobMetadata(job.meta)))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  job: state.job\n});\n\nexport default connect(mapStateToProps, {\n  fetchJob\n})(JobDetails);","map":{"version":3,"sources":["/jobs-portal/src/containers/JobDetails/index.tsx"],"names":["React","ReactHtmlParser","connect","fetchJob","Container","Row","Col","Loading","JobMeta","JobDetails","Component","renderJobMetadata","meta","componentDidMount","props","match","params","id","render","job","isLoading","pending","title","company","name","city","eval","description","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAaA,MAAMC,UAAN,SAAyBT,KAAK,CAACU,SAA/B,CAAsD;AAAA;AAAA;;AAAA,SAKlDC,iBALkD,GAK7BC,IAAD,IAAyB;AACzC,aAAO,oBAAC,OAAD,oBAAaA,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH,KAPiD;AAAA;;AAClDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWX,QAAX,CAAoB,KAAKW,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA5C;AACH;;AAMDC,EAAAA,MAAM,GAAG;AAAA,UACGC,GADH,GACW,KAAKL,KAAL,CAAWK,GADtB,CACGA,GADH;AAEL,UAAMC,SAAS,GAAG,KAAKN,KAAL,CAAWK,GAAX,CAAeE,OAAjC;AACA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAGD,SAAS,GAAG,aAAH,GAAmB,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,SAAS,GACN,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,GAGN,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,GAAG,CAACG,KAAT,CADJ,CADJ,EAII,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,GAAG,CAACI,OAAJ,CAAYC,IAAjB,QAAyBL,GAAG,CAACI,OAAJ,CAAYE,IAArC,CADJ,CAJJ,CADJ,EASI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKxB,eAAe,CAACyB,IAAI,CAAC,MAAMP,GAAG,CAACQ,WAAV,GAAwB,GAAzB,CAAL,CAApB,CADJ,CADJ,EAII,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKhB,iBAAL,CAAuBQ,GAAG,CAACP,IAA3B,CADL,CAJJ,CATJ,CAJR,CADJ,CADJ,CADJ,CADJ,CADJ;AAkCH;;AA9CiD;;AAiDtD,MAAMgB,eAAe,GAAIC,KAAD,KAAqB;AACzCV,EAAAA,GAAG,EAAEU,KAAK,CAACV;AAD8B,CAArB,CAAxB;;AAIA,eAAejB,OAAO,CAAC0B,eAAD,EAAkB;AAACzB,EAAAA;AAAD,CAAlB,CAAP,CAAqCM,UAArC,CAAf","sourcesContent":["import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { JobState } from '../../models/States';\nimport { connect } from 'react-redux';\nimport { fetchJob } from '../../actions';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Loading from '../../components/Loading';\nimport JobMeta from '../../components/JobMeta';\nimport { Metadata } from '../../models/Job/index';\n\ninterface JDProps {\n    job: JobState;\n    fetchJob: Function;\n    match: any;\n}\n\ninterface JDState {\n    job: JobState;\n}\n\nclass JobDetails extends React.Component<JDProps, {}> {\n    componentDidMount() {\n        this.props.fetchJob(this.props.match.params.id);\n    }\n\n    renderJobMetadata = (meta: Metadata): any => {\n        return <JobMeta {...meta} />\n    }\n\n    render() {\n        const { job } = this.props.job;\n        const isLoading = this.props.job.pending;\n        return (\n            <React.Fragment>\n                <Container>\n                    <Row>\n                        <Col lg={12} className={(isLoading ? 'text-center' : '')}>\n                            <Container className=\"job-details\">\n                                {isLoading ? (\n                                    <Loading />\n                                ) : (\n                                    <React.Fragment>\n                                        <Row className=\"job-details__header\">\n                                            <Col lg={12}>\n                                                <h3>{job.title}</h3>\n                                            </Col>\n                                            <Col lg={12}>\n                                                <h5>{job.company.name}, {job.company.city}</h5>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col lg={9} className=\"job-details__content\">\n                                                <p>{ ReactHtmlParser(eval('`' + job.description + '`')) }</p>\n                                            </Col>\n                                            <Col lg={3}>\n                                                {this.renderJobMetadata(job.meta)}\n                                            </Col>\n                                        </Row>\n                                    </React.Fragment>\n                                )}\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state: JDState) => ({\n    job: state.job\n})\n\nexport default connect(mapStateToProps, {fetchJob})(JobDetails);\n"]},"metadata":{},"sourceType":"module"}