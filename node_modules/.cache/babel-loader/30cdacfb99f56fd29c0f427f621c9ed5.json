{"ast":null,"code":"import axios from 'axios';\nimport Storage from '../../storage';\nexport let SearchJobsActionTypes;\n\n(function (SearchJobsActionTypes) {\n  SearchJobsActionTypes[\"SEARCH_JOBS_PENDING\"] = \"SEARCH_JOBS_PENDING\";\n  SearchJobsActionTypes[\"SEARCH_JOBS_SUCCESS\"] = \"SEARCH_JOBS_SUCCESS\";\n  SearchJobsActionTypes[\"SEARCH_JOBS_ERROR\"] = \"SEARCH_JOBS_ERROR\";\n})(SearchJobsActionTypes || (SearchJobsActionTypes = {}));\n\nconst searchJobsPending = () => {\n  return {\n    type: SearchJobsActionTypes.SEARCH_JOBS_PENDING\n  };\n};\n\nconst searchJobsSuccess = jobs => {\n  return {\n    type: SearchJobsActionTypes.SEARCH_JOBS_SUCCESS,\n    payload: jobs\n  };\n};\n\nconst searchJobsError = error => {\n  return {\n    type: SearchJobsActionTypes.SEARCH_JOBS_ERROR,\n    error\n  };\n};\n\nexport const searchJobs = () => async dispatch => {\n  dispatch(searchJobsPending());\n\n  try {\n    const storage = new Storage();\n    const keywords = storage.getSearchKeywords();\n    const jobs = await axios.post(\"http://localhost:3030/search\", null, {\n      params: keywords\n    });\n    setTimeout(() => {\n      dispatch(searchJobsSuccess(jobs.data));\n    }, 1000);\n  } catch (error) {\n    dispatch(searchJobsError(error));\n  }\n};","map":{"version":3,"sources":["/app/src/actions/searchJobs/index.tsx"],"names":["axios","Storage","SearchJobsActionTypes","searchJobsPending","type","SEARCH_JOBS_PENDING","searchJobsSuccess","jobs","SEARCH_JOBS_SUCCESS","payload","searchJobsError","error","SEARCH_JOBS_ERROR","searchJobs","dispatch","storage","keywords","getSearchKeywords","post","params","setTimeout","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,OAAP,MAAoB,eAApB;AAEA,WAAYC,qBAAZ;;WAAYA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAoBZ,MAAMC,iBAAiB,GAAG,MAAmB;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEF,qBAAqB,CAACG;AADzB,GAAP;AAGH,CAJD;;AAMA,MAAMC,iBAAiB,GAAIC,IAAD,IAA8B;AACpD,SAAO;AACHH,IAAAA,IAAI,EAAEF,qBAAqB,CAACM,mBADzB;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,eAAe,GAAIC,KAAD,IAA8B;AAClD,SAAO;AACHP,IAAAA,IAAI,EAAEF,qBAAqB,CAACU,iBADzB;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,OAAO,MAAME,UAAU,GAAG,MAAM,MAAOC,QAAP,IAA8B;AAC1DA,EAAAA,QAAQ,CAACX,iBAAiB,EAAlB,CAAR;;AACA,MAAI;AACA,UAAMY,OAAO,GAAG,IAAId,OAAJ,EAAhB;AACA,UAAMe,QAAQ,GAAGD,OAAO,CAACE,iBAAR,EAAjB;AACA,UAAMV,IAAI,GAAG,MAAMP,KAAK,CAACkB,IAAN,iCAA2C,IAA3C,EAAiD;AAAEC,MAAAA,MAAM,EAAEH;AAAV,KAAjD,CAAnB;AAEAI,IAAAA,UAAU,CAAC,MAAM;AACbN,MAAAA,QAAQ,CAACR,iBAAiB,CAACC,IAAI,CAACc,IAAN,CAAlB,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GARD,CAQE,OAAMV,KAAN,EAAa;AACXG,IAAAA,QAAQ,CAACJ,eAAe,CAACC,KAAD,CAAhB,CAAR;AACH;AACJ,CAbM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport Job from '../../models/Job';\nimport Storage from '../../storage';\n\nexport enum SearchJobsActionTypes {\n    SEARCH_JOBS_PENDING = 'SEARCH_JOBS_PENDING',\n    SEARCH_JOBS_SUCCESS = 'SEARCH_JOBS_SUCCESS',\n    SEARCH_JOBS_ERROR = 'SEARCH_JOBS_ERROR'\n}\n\ninterface JobsPending {\n    type: typeof SearchJobsActionTypes.SEARCH_JOBS_PENDING;\n}\n\ninterface JobsSuccess {\n    type: typeof SearchJobsActionTypes.SEARCH_JOBS_SUCCESS;\n    payload: Job[]\n}\n\ninterface JobsError {\n    type: typeof SearchJobsActionTypes.SEARCH_JOBS_ERROR;\n    error: string;\n}\n\nconst searchJobsPending = (): JobsPending => {\n    return {\n        type: SearchJobsActionTypes.SEARCH_JOBS_PENDING\n    }\n}\n\nconst searchJobsSuccess = (jobs: Job[]): JobsSuccess => {\n    return {\n        type: SearchJobsActionTypes.SEARCH_JOBS_SUCCESS,\n        payload: jobs\n    }\n}\n\nconst searchJobsError = (error: string): JobsError => {\n    return {\n        type: SearchJobsActionTypes.SEARCH_JOBS_ERROR,\n        error\n    }\n}\n\nexport const searchJobs = () => async (dispatch: Dispatch) => {\n    dispatch(searchJobsPending());\n    try {\n        const storage = new Storage();\n        const keywords = storage.getSearchKeywords();\n        const jobs = await axios.post(`http://localhost:3030/search`, null, { params: keywords });\n\n        setTimeout(() => {\n            dispatch(searchJobsSuccess(jobs.data));\n        }, 1000);\n    } catch(error) {\n        dispatch(searchJobsError(error));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}