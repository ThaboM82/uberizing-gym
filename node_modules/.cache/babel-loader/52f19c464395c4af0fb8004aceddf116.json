{"ast":null,"code":"import axios from 'axios';\nimport * as jwt from 'jsonwebtoken';\nexport let LoginActions;\n\n(function (LoginActions) {\n  LoginActions[\"LOGIN_PENDING\"] = \"LOGIN_PENDING\";\n  LoginActions[\"LOGIN_SUCCESS\"] = \"LOGIN_SUCCEES\";\n  LoginActions[\"LOGIN_ERROR\"] = \"LOGIN_ERROR\";\n})(LoginActions || (LoginActions = {}));\n\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: LoginActions.LOGIN_PENDING\n  });\n\n  try {\n    const token = await axios.post(\"http://localhost:3030/login\", {\n      username,\n      password\n    });\n    const decodedToken = jwt.decode(token === null || token === void 0 ? void 0 : token.data);\n    const currentUser = {\n      token: token.data,\n      isLoggedIn: token && token.data ? true : false,\n      ...decodedToken\n    };\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: currentUser\n    });\n  } catch (error) {\n    var _error$response$data$, _error$response, _error$response$data;\n\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error: (_error$response$data$ = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : 'Authentication Denied'\n    });\n  }\n};","map":{"version":3,"sources":["/app/src/actions/auth/index.tsx"],"names":["axios","jwt","LoginActions","login","username","password","dispatch","type","LOGIN_PENDING","token","post","decodedToken","decode","data","currentUser","isLoggedIn","LOGIN_SUCCESS","payload","error","LOGIN_ERROR","response","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAIA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAMZ,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAwC,MAAOC,QAAP,IAA8B;AACzFA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,YAAY,CAACM;AAArB,GAAD,CAAR;;AAEA,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMT,KAAK,CAACU,IAAN,gCAA0C;AAAEN,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAA1C,CAApB;AACA,UAAMM,YAAiB,GAAGV,GAAG,CAACW,MAAJ,CAAWH,KAAX,aAAWA,KAAX,uBAAWA,KAAK,CAAEI,IAAlB,CAA1B;AACA,UAAMC,WAAwB,GAAG;AAC/BL,MAAAA,KAAK,EAAEA,KAAK,CAACI,IADkB;AAE/BE,MAAAA,UAAU,EAAEN,KAAK,IAAIA,KAAK,CAACI,IAAf,GAAsB,IAAtB,GAA6B,KAFV;AAG/B,SAAGF;AAH4B,KAAjC;AAKAL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACc,aADZ;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAZD,CAYE,OAAOI,KAAP,EAAc;AAAA;;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACiB,WADZ;AAEPD,MAAAA,KAAK,2BAAEA,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEE,QAAT,4EAAE,gBAAiBP,IAAnB,yDAAE,qBAAuBQ,OAAzB,yEAAoC;AAFlC,KAAD,CAAR;AAID;AACF,CArBM","sourcesContent":["import axios from 'axios';\nimport * as jwt from 'jsonwebtoken';\nimport { Dispatch } from 'redux';\nimport { CurrentUser } from '../../models/CurrentUser';\n\nexport enum LoginActions {\n  LOGIN_PENDING = 'LOGIN_PENDING',\n  LOGIN_SUCCESS = 'LOGIN_SUCCEES',\n  LOGIN_ERROR = 'LOGIN_ERROR',\n}\n\nexport const login = (username: string, password: string) => async (dispatch: Dispatch) => {\n  dispatch({ type: LoginActions.LOGIN_PENDING });\n\n  try {\n    const token = await axios.post(`http://localhost:3030/login`, { username, password });\n    const decodedToken: any = jwt.decode(token?.data);\n    const currentUser: CurrentUser = {\n      token: token.data,\n      isLoggedIn: token && token.data ? true : false,\n      ...decodedToken,\n    };\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: currentUser,\n    });\n  } catch (error) {\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error: error?.response?.data?.message ?? 'Authentication Denied',\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}