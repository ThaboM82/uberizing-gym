{"ast":null,"code":"import axios from 'axios';\nexport let JobActionTypes;\n\n(function (JobActionTypes) {\n  JobActionTypes[\"FETCH_JOB_PENDING\"] = \"FETCH_JOB_PENDING\";\n  JobActionTypes[\"FETCH_JOB_SUCCESS\"] = \"FETCH_JOB_SUCCESS\";\n  JobActionTypes[\"FETCH_JOB_ERROR\"] = \"FETCH_JOB_ERROR\";\n})(JobActionTypes || (JobActionTypes = {}));\n\nconst fetchJobsPending = () => {\n  return {\n    type: JobActionTypes.FETCH_JOB_PENDING\n  };\n};\n\nconst fetchJobsSuccess = jobs => {\n  return {\n    type: JobActionTypes.FETCH_JOB_SUCCESS,\n    payload: jobs\n  };\n};\n\nconst fetchJobsError = error => {\n  return {\n    type: JobActionTypes.FETCH_JOB_ERROR,\n    error\n  };\n};\n\nexport const fetchJob = id => async dispatch => {\n  dispatch(fetchJobsPending());\n\n  try {\n    const job = await axios.get(\"http://localhost:3030/job/\".concat(id));\n    setTimeout(() => {\n      dispatch(fetchJobsSuccess(job.data));\n    }, 1000);\n  } catch (error) {\n    dispatch(fetchJobsError(error));\n  }\n};","map":{"version":3,"sources":["/app/src/actions/job/index.tsx"],"names":["axios","JobActionTypes","fetchJobsPending","type","FETCH_JOB_PENDING","fetchJobsSuccess","jobs","FETCH_JOB_SUCCESS","payload","fetchJobsError","error","FETCH_JOB_ERROR","fetchJob","id","dispatch","job","get","setTimeout","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAoBZ,MAAMC,gBAAgB,GAAG,MAAkB;AACvC,SAAO;AACHC,IAAAA,IAAI,EAAEF,cAAc,CAACG;AADlB,GAAP;AAGH,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,IAAD,IAA6B;AAClD,SAAO;AACHH,IAAAA,IAAI,EAAEF,cAAc,CAACM,iBADlB;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,cAAc,GAAIC,KAAD,IAA6B;AAChD,SAAO;AACHP,IAAAA,IAAI,EAAEF,cAAc,CAACU,eADlB;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,OAAO,MAAME,QAAQ,GAAIC,EAAD,IAAgB,MAAOC,QAAP,IAA8B;AAClEA,EAAAA,QAAQ,CAACZ,gBAAgB,EAAjB,CAAR;;AACA,MAAI;AACA,UAAMa,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,qCAAuCH,EAAvC,EAAlB;AACAI,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACT,gBAAgB,CAACU,GAAG,CAACG,IAAL,CAAjB,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GALD,CAKE,OAAMR,KAAN,EAAa;AACXI,IAAAA,QAAQ,CAACL,cAAc,CAACC,KAAD,CAAf,CAAR;AACH;AACJ,CAVM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport Job from '../../models/Job';\n\nexport enum JobActionTypes {\n    FETCH_JOB_PENDING = 'FETCH_JOB_PENDING',\n    FETCH_JOB_SUCCESS = 'FETCH_JOB_SUCCESS',\n    FETCH_JOB_ERROR = 'FETCH_JOB_ERROR'\n}\n\ninterface JobPending {\n    type: typeof JobActionTypes.FETCH_JOB_PENDING;\n}\n\ninterface JobSuccess {\n    type: typeof JobActionTypes.FETCH_JOB_SUCCESS;\n    payload: Job[]\n}\n\ninterface JobError {\n    type: typeof JobActionTypes.FETCH_JOB_ERROR;\n    error: string;\n}\n\nconst fetchJobsPending = (): JobPending => {\n    return {\n        type: JobActionTypes.FETCH_JOB_PENDING\n    }\n}\n\nconst fetchJobsSuccess = (jobs: Job[]): JobSuccess => {\n    return {\n        type: JobActionTypes.FETCH_JOB_SUCCESS,\n        payload: jobs\n    }\n}\n\nconst fetchJobsError = (error: string): JobError => {\n    return {\n        type: JobActionTypes.FETCH_JOB_ERROR,\n        error\n    }\n}\n\nexport const fetchJob = (id: number) => async (dispatch: Dispatch) => {\n    dispatch(fetchJobsPending());\n    try {\n        const job = await axios.get(`http://localhost:3030/job/${id}`);\n        setTimeout(() => {\n            dispatch(fetchJobsSuccess(job.data));\n        }, 1000);\n    } catch(error) {\n        dispatch(fetchJobsError(error));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}