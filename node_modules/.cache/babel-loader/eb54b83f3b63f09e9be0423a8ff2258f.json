{"ast":null,"code":"import axios from 'axios';\nexport let LoginActions;\n\n(function (LoginActions) {\n  LoginActions[\"LOGIN_PENDING\"] = \"LOGIN_PENDING\";\n  LoginActions[\"LOGIN_SUCCESS\"] = \"LOGIN_SUCCEES\";\n  LoginActions[\"LOGIN_ERROR\"] = \"LOGIN_ERROR\";\n})(LoginActions || (LoginActions = {}));\n\n;\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: LoginActions.LOGIN_PENDING\n  });\n\n  try {\n    const token = await axios.post(\"http://localhost:3030/login\", {\n      username,\n      password\n    });\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: token\n    });\n  } catch (error) {\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error\n    });\n  }\n};","map":{"version":3,"sources":["/jobs-portal/src/actions/auth/index.tsx"],"names":["axios","LoginActions","login","username","password","dispatch","type","LOGIN_PENDING","token","post","LOGIN_SUCCESS","payload","error","LOGIN_ERROR"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAIX;AAED,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAwC,MAAOC,QAAP,IAA8B;AACzFA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,YAAY,CAACM;AAArB,GAAD,CAAR;;AAEA,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMR,KAAK,CAACS,IAAN,gCAA0C;AAACN,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAA1C,CAApB;AACAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACS,aADZ;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOI,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACY,WADZ;AAEPD,MAAAA;AAFO,KAAD,CAAR;AAID;AACF,CAfM","sourcesContent":["import axios from 'axios';\nimport * as jwt from 'jsonwebtoken';\nimport { Dispatch } from \"redux\";\nimport { Token } from '../../models/Token';\n\nexport enum LoginActions {\n  LOGIN_PENDING = 'LOGIN_PENDING',\n  LOGIN_SUCCESS = 'LOGIN_SUCCEES',\n  LOGIN_ERROR = 'LOGIN_ERROR',\n};\n\nexport const login = (username: string, password: string) => async (dispatch: Dispatch) => {\n  dispatch({ type: LoginActions.LOGIN_PENDING});\n\n  try {\n    const token = await axios.post(`http://localhost:3030/login`, {username, password});\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: token,\n    });\n  } catch (error) {\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}