{"ast":null,"code":"import _defineProperty from \"/jobs-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport * as jwt from 'jsonwebtoken';\nexport let LoginActions;\n\n(function (LoginActions) {\n  LoginActions[\"LOGIN_PENDING\"] = \"LOGIN_PENDING\";\n  LoginActions[\"LOGIN_SUCCESS\"] = \"LOGIN_SUCCEES\";\n  LoginActions[\"LOGIN_ERROR\"] = \"LOGIN_ERROR\";\n})(LoginActions || (LoginActions = {}));\n\n;\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: LoginActions.LOGIN_PENDING\n  });\n\n  try {\n    const token = await axios.post(\"http://localhost:3030/login\", {\n      username,\n      password\n    });\n    const decodedToken = jwt.decode(token.data);\n\n    const tokenData = _objectSpread({\n      token: token.data,\n      isLoggedIn: token && token.data ? true : false\n    }, decodedToken); // console.log(tokenData);\n\n\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: tokenData\n    });\n  } catch (error) {\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error\n    });\n  }\n};","map":{"version":3,"sources":["/jobs-portal/src/actions/auth/index.tsx"],"names":["axios","jwt","LoginActions","login","username","password","dispatch","type","LOGIN_PENDING","token","post","decodedToken","decode","data","tokenData","isLoggedIn","LOGIN_SUCCESS","payload","error","LOGIN_ERROR"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAIA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAIX;AAED,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAwC,MAAOC,QAAP,IAA8B;AACzFA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,YAAY,CAACM;AAArB,GAAD,CAAR;;AAEA,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMT,KAAK,CAACU,IAAN,gCAA0C;AAACN,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAA1C,CAApB;AACA,UAAMM,YAAiB,GAAGV,GAAG,CAACW,MAAJ,CAAWH,KAAK,CAACI,IAAjB,CAA1B;;AACA,UAAMC,SAAgB;AAAIL,MAAAA,KAAK,EAAEA,KAAK,CAACI,IAAjB;AAAuBE,MAAAA,UAAU,EAAEN,KAAK,IAAIA,KAAK,CAACI,IAAf,GAAsB,IAAtB,GAA6B;AAAhE,OAA0EF,YAA1E,CAAtB,CAHE,CAIF;;;AACAL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACc,aADZ;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GATD,CASE,OAAOI,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,YAAY,CAACiB,WADZ;AAEPD,MAAAA;AAFO,KAAD,CAAR;AAID;AACF,CAlBM","sourcesContent":["import axios from 'axios';\nimport * as jwt from 'jsonwebtoken';\nimport { Dispatch } from \"redux\";\nimport { Token } from '../../models/Token';\n\nexport enum LoginActions {\n  LOGIN_PENDING = 'LOGIN_PENDING',\n  LOGIN_SUCCESS = 'LOGIN_SUCCEES',\n  LOGIN_ERROR = 'LOGIN_ERROR',\n};\n\nexport const login = (username: string, password: string) => async (dispatch: Dispatch) => {\n  dispatch({ type: LoginActions.LOGIN_PENDING});\n\n  try {\n    const token = await axios.post(`http://localhost:3030/login`, {username, password});\n    const decodedToken: any = jwt.decode(token.data);\n    const tokenData: Token = {token: token.data, isLoggedIn: token && token.data ? true : false, ...decodedToken};\n    // console.log(tokenData);\n    dispatch({\n      type: LoginActions.LOGIN_SUCCESS,\n      payload: tokenData,\n    });\n  } catch (error) {\n    dispatch({\n      type: LoginActions.LOGIN_ERROR,\n      error,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}