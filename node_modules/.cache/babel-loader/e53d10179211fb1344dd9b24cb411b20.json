{"ast":null,"code":"import axios from 'axios';\nexport let RegisterUserActionTypes;\n\n(function (RegisterUserActionTypes) {\n  RegisterUserActionTypes[\"REGISTER_USER_PENDING\"] = \"REGISTER_USER_PENDING\";\n  RegisterUserActionTypes[\"REGISTER_USER_SUCCESS\"] = \"REGISTER_USER_SUCCESS\";\n  RegisterUserActionTypes[\"REGISTER_USER_ERROR\"] = \"REGISTER_USER_ERROR\";\n})(RegisterUserActionTypes || (RegisterUserActionTypes = {}));\n\nexport const registerUser = userPayload => async dispatch => {\n  dispatch({\n    type: RegisterUserActionTypes.REGISTER_USER_PENDING\n  });\n\n  try {\n    const user = await axios.post(\"http://localhost:3030/register-user\", userPayload);\n    dispatch({\n      type: RegisterUserActionTypes.REGISTER_USER_SUCCESS,\n      payload: user === null || user === void 0 ? void 0 : user.data\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    // let errorMessage = '';\n    // console.log(error?.response);\n    // const err = error?.response?.data?.errors;\n    // if (err) {\n    //   err.forEach((e: any) => errorMessage += `<p>${Object.values(e.constraints)[0]}</p>`);\n    // }\n    dispatch({\n      type: RegisterUserActionTypes.REGISTER_USER_ERROR,\n      error: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'User Registration Failed'\n    });\n  }\n};","map":{"version":3,"sources":["/app/src/actions/user/index.tsx"],"names":["axios","RegisterUserActionTypes","registerUser","userPayload","dispatch","type","REGISTER_USER_PENDING","user","post","REGISTER_USER_SUCCESS","payload","data","error","REGISTER_USER_ERROR","response","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,WAAYC,uBAAZ;;WAAYA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;GAAAA,uB,KAAAA,uB;;AAMZ,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAAuB,MAAOC,QAAP,IAA8B;AAC/EA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ,uBAAuB,CAACK;AAAhC,GAAD,CAAR;;AACA,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMP,KAAK,CAACQ,IAAN,wCAAkDL,WAAlD,CAAnB;AACAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,uBAAuB,CAACQ,qBADvB;AAEPC,MAAAA,OAAO,EAAEH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEI;AAFR,KAAD,CAAR;AAID,GAND,CAME,OAAOC,KAAP,EAAc;AAAA;;AACd;AACA;AACA;AACA;AACA;AACA;AACAR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,uBAAuB,CAACY,mBADvB;AAEPD,MAAAA,KAAK,EAAE,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEE,QAAP,4FAAiBH,IAAjB,8EAAuBI,OAAvB,KAAkC;AAFlC,KAAD,CAAR;AAID;AACF,CApBM","sourcesContent":["import axios from 'axios';\nimport { User } from '../../models/User';\nimport { Dispatch } from 'redux';\n\nexport enum RegisterUserActionTypes {\n  REGISTER_USER_PENDING = 'REGISTER_USER_PENDING',\n  REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS',\n  REGISTER_USER_ERROR = 'REGISTER_USER_ERROR',\n}\n\nexport const registerUser = (userPayload: User) => async (dispatch: Dispatch) => {\n  dispatch({ type: RegisterUserActionTypes.REGISTER_USER_PENDING });\n  try {\n    const user = await axios.post(`http://localhost:3030/register-user`, userPayload);\n    dispatch({\n      type: RegisterUserActionTypes.REGISTER_USER_SUCCESS,\n      payload: user?.data,\n    });\n  } catch (error) {\n    // let errorMessage = '';\n    // console.log(error?.response);\n    // const err = error?.response?.data?.errors;\n    // if (err) {\n    //   err.forEach((e: any) => errorMessage += `<p>${Object.values(e.constraints)[0]}</p>`);\n    // }\n    dispatch({\n      type: RegisterUserActionTypes.REGISTER_USER_ERROR,\n      error: error?.response?.data?.message || 'User Registration Failed',\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}